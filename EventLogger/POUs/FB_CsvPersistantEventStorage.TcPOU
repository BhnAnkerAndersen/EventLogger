<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_CsvPersistantEventStorage" Id="{b8a65f83-aabf-40b4-bbc0-8edd275667a2}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CsvPersistantEventStorage IMPLEMENTS I_PersistantEventStorage
VAR
	fbFileOpen	: FB_FileOpen := (sNetId := '192.68.134.160.1.1', sPathName := 'C:\Users\bhn\Desktop\Events.log', nMode := FOPEN_MODEAPPEND OR FOPEN_MODETEXT);
	fbFilePuts	: FB_FilePuts;
	fbFileClose : FB_FileClose;
	eWriteState : (FILE_OPEN_TRIGGER, FILE_OPEN, WAIT_FOR_EVENT, WRITE_EVENT_TRIGGER, WRITE_EVENT, FILE_CLOSE_TRIGGER, FILE_CLOSE, ERROR); 
	stEventWrittenToFile : ST_Event;
	
	sCsvString	: T_MaxString;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE eWriteState OF
	FILE_OPEN_TRIGGER:
		fbFileOpen(bExecute := TRUE);
		eWriteState := FILE_OPEN;
		
	FILE_OPEN:
		fbFileOpen(bExecute := FALSE);
		IF fbFileOpen.bError THEN
			eWriteState := ERROR;
		ELSIF NOT fbFileOpen.bBusy AND fbFileOpen.hFile <> 0 THEN
			eWriteState := WAIT_FOR_EVENT;
		END_IF
		
	WAIT_FOR_EVENT:
		;//Handled in method
		
	WRITE_EVENT_TRIGGER:
		sCsvString := M_CreateCsvString(stEvent := stEventWrittenToFile);
		fbFilePuts(bExecute := TRUE, sLine := sCsvString, hFile := fbFileOpen.hFile);
		eWriteState := WRITE_EVENT;
	
	WRITE_EVENT: //Gets error 1795
		fbFilePuts(bExecute := FALSE);
		IF fbFilePuts.bError THEN
			eWriteState := ERROR;
		ELSIF NOT fbFilePuts.bBusy AND fbFilePuts.hFile <> 0 THEN
			eWriteState := FILE_CLOSE;
		END_IF
		
	FILE_CLOSE_TRIGGER:
		fbFileClose(bExecute := TRUE, hFile := fbFileOpen.hFile);
		eWriteState := FILE_CLOSE;
	
	FILE_CLOSE:
		fbFileClose(bExecute := FALSE);
		IF fbFileClose.bError THEN
			eWriteState := ERROR;
		ELSIF NOT fbFileClose.bBusy AND fbFileClose.hFile <> 0 THEN
			eWriteState := FILE_OPEN_TRIGGER;
		END_IF
		
	ERROR:
		; //Do nothing
END_CASE]]></ST>
    </Implementation>
    <Method Name="M_CreateCsvString" Id="{2b20bd3f-c705-4f8f-8d3a-ae9dd8ec7865}">
      <Declaration><![CDATA[METHOD PRIVATE M_CreateCsvString : T_MaxString
VAR_INPUT
	stEvent : REFERENCE TO ST_Event;
END_VAR

VAR
	TempString : T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TempString := TO_STRING(stEvent.eEventType);
TempString := CONCAT(STR1 := TempString, STR2 := ',');
TempString := CONCAT(STR1 := TempString, STR2 := TO_STRING(stEvent.eEventSeverity));
TempString := CONCAT(STR1 := TempString, STR2 := ',');
TempString := CONCAT(STR1 := TempString, STR2 := TO_STRING(stEvent.nEventIdentity));
TempString := CONCAT(STR1 := TempString, STR2 := ',');
TempString := CONCAT(STR1 := TempString, STR2 := stEvent.sEventText);
TempString := CONCAT(STR1 := TempString, STR2 := ',');
TempString := CONCAT(STR1 := TempString, STR2 := TO_STRING(stEvent.dtTimestamp));
TempString := CONCAT(STR1 := TempString, STR2 := '$n');

M_CreateCsvString := TempString;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StoreEvent" Id="{59d8da18-4d4b-4d5d-adf6-3d2e2d664abc}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
METHOD M_StoreEvent
VAR_INPUT
	stEvent	: ST_Event;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eWriteState = WAIT_FOR_EVENT THEN
	eWriteState := WRITE_EVENT_TRIGGER;
	stEventWrittenToFile := stEvent;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>